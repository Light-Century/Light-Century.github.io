[{"title":"Notice","date":"2023-02-03T06:24:43.000Z","url":"/2023/02/03/Notice/","tags":[["Notice","/tags/Notice/"]],"categories":[["Notice","/categories/Notice/"]],"content":"若文章中LaTeX失效，请刷新界面。"},{"title":"CF1746C Permutation Operations","date":"2023-02-02T14:09:35.000Z","url":"/2023/02/02/CF1746C/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["Codeforces","/tags/Codeforces/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"Problem 题意：给定一个\\(n\\)的排列，共有\\(n\\)次操作，第\\(i\\)次操作使得排列的非空后缀的元素分别增加\\(i\\)，使得序列中的逆序对数量最少。 数据范围 \\(1\\le n \\le {10}^5,1 \\le a_i \\le n,\\sum n\\le 2 \\times{10}^5\\) Solution 不妨考虑逆序对的定义:\\(i&gt;j\\)且\\(a_i&lt;a_j\\)。 进一步思考选择一个后缀加上\\(i\\)的影响，不难想到对于所选择的后缀内部，其逆序对贡献不变，而未被选择的部分则会改变其贡献，且对后缀进行操作逆序对数量一定不大于操作前的数量。 我们不妨差分的去想，若使第\\(i\\)位的元素所贡献的逆序对数量最少，则我们需要使\\(a_j\\le a_i(1 \\le j&lt;i)\\)。也就是说，第\\(k\\)次操作在对\\(a_i\\)为起始位置的后缀，会使得\\(\\max {a_j}-a_i\\leftarrow\\max a_j-a_i-k(1\\le j&lt;i)\\)。对于\\(a_i\\)，其\\(\\max {a_j}-a_i\\le n-a_i\\)，故我们直接将第\\(n-a_i\\)次操作选在\\(i\\)的位置即可。 时间复杂度\\(O(n)\\)。 "},{"title":"四点闲话","date":"2022-12-31T10:40:48.000Z","url":"/2022/12/31/%E5%9B%9B%E7%82%B9%E9%97%B2%E8%AF%9D/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"\\[ \\Large 跌倒又爬起，山岭静悄悄 \\]"},{"title":"晚自习闲话","date":"2022-12-06T13:43:33.000Z","url":"/2022/12/06/%E6%99%9A%E8%87%AA%E4%B9%A0%E9%97%B2%E8%AF%9D/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"不经意的一瞥，涌起的不是期待，而是悲伤。 是什么时候变成这个样子的呢... 仔细想想，一直以来，勇气的来源似乎从来不是「无悔」，而是「害怕错过」。 不想错过，所以向前一步。 害怕错过，所以患得患失。 但，一直以来，其实，害怕错过的，一直在错过吧，或许应该说，从来就不曾遇见。 本就不应相见吧，本来也不曾有错过吧。故事讲的很清楚，只是不曾遇见，不该是我。 这样说的话，其实也不曾错过。 一次次收获的，其实只有错意与遗憾吧。 不曾想过，不曾遇过，便，不曾错过。 "},{"title":"浅谈进制转换","date":"2022-11-10T14:14:56.000Z","url":"/2022/11/10/%E6%B5%85%E8%B0%88%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["算法学习笔记","/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":" 由于本文为入门导向，故某些内容介绍较为浅薄，仅供初级理解使用 关于进制 何为进制？进制是表示数的方法。 那何为数呢？数即是一个值。例如面对某一定体积的物体，你可以使用多种表达方式去描述它的大小，但它的固有体积是一定的，是不随表达方式而改变的，而进制，就可以看作一些对于一个值的不同的表达方式。 日常中，我们对于10进制与60进制的使用比较常见，但随着计算机理论与技术的发展，二进制，八进制，十六进制等逐渐进入人们的视野当中。 进制的表示 我们日常中使用的进制通常为10进制,例如\\((114514)_{10},(1919810)_{10}\\)，这些数有什么特点？十进制有什么特点？ 根据我们日常的使用计算来说，不难发现十进制的特点其实是逢十进一。也就是说，对于十进制数来讲，它的每一位最大能表示的范围是\\([0,9]\\),而超出这个范围时则需向前进位。 由此性质，我们观察十进制数，不难得出上文的数字其实是\\(114514=1\\times10^5+1\\times10^4+4\\times10^3+5\\times10^2+1\\times10^1+4\\times10^0\\),显然的，对于第\\(i\\)位十进制,它所对应的值即为\\(10^{i-1}\\)。 根据十进制的定义推广,不难得出,对于k进制而言,\\((n)_{k}=\\sum a_i\\times k^{i-1}\\) 令k=2,\\((n)_{2}=\\sum a_i\\times 2^{i-1}\\)即是二进制下的表达形式 关于进制转换 显然的,既然我们拥有多个进制,对于给定的一个数,我们是否能给出它在不同进制下的形式呢? 进制转换的实质便是将值的某进制下的形式还原为值，再以其他进制的形式进行表示。 我们依托进制来表示数,那数进制的转化也必定依托于进制与进制之间的关系。 进制与进制间的关系 考虑一个值n,显然存在\\((n)_k=(n)_p\\),因为n的值没有改变,改变的仅仅是n的表现形式。 那假设我们拥有\\((n)_k\\),如何去得出\\((n)_p\\)呢? 根据定义,\\((n)_k=\\sum a_i\\times k^{i-1},(n)_p=\\sum b_j\\times p^{j-1}\\),不难想到我们可以将其还原为值再进行进制表示。 如何去获取\\((n)_p\\)每一位的值呢？ 显然的,对于\\((n)_p\\)的第一位,由\\((n)_p=\\sum b_j\\times p^{j-1}\\)可知,\\((n)_p\\)的其他位所表示的值皆是p的倍数,故\\((n)_k\\quad mod\\quad p = \\sum b_j\\times p^{j-1}\\quad mod\\quad p=b_1\\) 其次,对于\\((n)_p来讲,在整数意义下\\frac{(n)_p}{p}=(n)_p=\\sum \\frac{b_j\\times p^{j-1}}{p}=(\\lfloor\\frac{n}{p}\\rfloor)_p\\),我们可以理解为\\((n)_p\\)在除以\\(p\\)后整个表示删除了最后一位。 例如:\\(\\frac{(1000101)_2}{2}=(100010)_2\\) 由上两条性质,我们不难发现,k进制转到p进制其实只需不断使用第一个性质,不断取出每一位并进行转化, - 即\\(b_j=\\frac{(n)_k}{(p)_k^{j-1}}\\quad mod\\quad (p)_k\\quad=\\frac{(n)_k \\quad mod\\quad (p)_k^j}{(p)_k^{j-1}}\\) 在二进制中,结合位运算可以快速求出n的某一位的值。 中介转化 鉴于某些进制的互相转化是十分困难的,我们此时可以采用中间进制沟通两个不同进制间进行转化。以十进制为中间进制为例。 结合上文的性质显然可以得出这份代码。 值得留意的是,\\(ans=ans*a+something\\)应当如何去理解。 我们不难从数学上看出,出于乘法分配律,在多次连乘中,\\(a_i的系数是k^{i-1}\\),故算法的正确性得证。 如何从直观的从进制数的角度来解释呢? 前文提到\\(\\frac{(n)_k}{k}\\)的效果相当于将\\((n)_k\\)的最后一位删除,那相反的,\\((n)_k\\times k\\)则可以看作\\((n)_k\\)末尾增添了一位0。此时将当前位置的值再加到新的变量中,显然是正确的。 Code: "},{"title":"今日有感","date":"2022-11-05T14:04:03.000Z","url":"/2022/11/05/feelings/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"],["感触","/tags/%E6%84%9F%E8%A7%A6/"]],"categories":[["感触","/categories/%E6%84%9F%E8%A7%A6/"]],"content":"\\[ \\Large 离别总是令人伤感的吧？ \\\\ 如果再也不会见面 \\\\ 是否当初就本不应相见? \\\\ 零落在过去的碎片 \\\\ 是否还会再回想起从前? \\]"},{"title":"三点闲话","date":"2022-11-04T14:39:26.000Z","url":"/2022/11/04/%E4%B8%89%E7%82%B9%E9%97%B2%E8%AF%9D/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"\\[ \\Large 希望自己不要忘记曾经的热爱 \\\\ 更希望不要忘记自己为何而来 \\]"},{"title":"今日有感","date":"2022-10-31T14:13:50.000Z","url":"/2022/10/31/%E4%BB%8A%E6%97%A5%E6%9C%89%E6%84%9F/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"],["感触","/tags/%E6%84%9F%E8%A7%A6/"]],"categories":[["感触","/categories/%E6%84%9F%E8%A7%A6/"]],"content":"\\[ \\Large 庙小妖风大,水浅王八多 \\]"},{"title":"两点闲话","date":"2022-10-30T14:20:54.000Z","url":"/2022/10/30/%E4%B8%A4%E7%82%B9%E9%97%B2%E8%AF%9D/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"最近晚上天天被蚊子咬醒，半夜迷迷糊糊去找花露水，很烦躁，状态很差，思考是不是要买个蚊帐。 或许是天天睡眠的问题，最近的状态确实很差。 很迷茫。不知道该去做些什么。什么都想做却什么都没有时间去做。 时间分配的也极其不合理。能专注下来时间花费就太多了。分散着去做惰性就太强了。 学这学那，却没有一件能完整的学好，或许是\\(\\frac{1}{4}\\)吊子水平。 因为自知只是\\(\\frac{1}{4}\\)瓶水的水平，所以从来不去晃荡。但碰见\\(\\frac{1}{8}\\)乃至\\(\\frac{1}{16}\\)瓶水搁那晃荡会很烦。 尽可能在节省开支了，很辛苦，但一想到自己纯纯消费者那还是要坚持。 打球老是找不到感觉，现在连个发球都不怎么会，烦躁。 感觉还是啥都学不好啊，自信与自卑同时存在的感觉。前面的路太远而一眼望不到终点，很迷茫，很无措。 没有前进的方向，说实话，感觉现在就是无头苍蝇乱撞的去学，想到啥去做啥，没有规划，效率低下。 但如果不是一时兴起的去做恐怕又要犯懒了吧。 他们为什么能这么强。我为什么这么菜。 我也想要有一天能站在巅峰俯瞰这世间啊。但是好菜。怎么学感觉都学不懂，干啥都不是很会。他们是怎么掌握的。 没有队友，也没人带着我前进，很迷茫。根本不知道怎么去学该学什么。 好菜 太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。太菜。好失败。 蛹，终究会化成蝶吧？"},{"title":"关于空间内n点中两点曼哈顿距离的最大问题","date":"2022-10-26T09:54:44.000Z","url":"/2022/10/26/%E5%85%B3%E4%BA%8E%E7%A9%BA%E9%97%B4%E5%86%85n%E7%82%B9%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E7%9A%84%E6%9C%80%E5%A4%A7%E9%97%AE%E9%A2%98/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["算法学习笔记","/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"给定\\(d\\)维空间的 \\(n\\) 个点，求\\(max\\{dist_{a_i,a_j}\\}\\) 关于d的值很小的情况 对于n维空间内的两点\\(\\alpha=(a_1,\\ldots,a_n)\\),\\(\\beta=(b_1,\\ldots,b_n)\\),其曼哈顿距离为\\(\\sum_{i=1}^{d}|a_i-b_i|\\),显然地,对于每一对\\(|a_i-b_i|\\),其必等于\\(\\max(a_i-b_i,b_i-a_i)\\) 由上可得,\\(dist_{\\alpha,\\beta}=\\max \\{\\sum_{p_i \\in (-1,1)}^dp_i(a_i-b_i)\\}=\\max \\{\\sum_{p_i \\in (-1,1)}^dp_ia_i-\\sum_{p_i \\in (-1,1)}^dp_ib_i\\}\\) 由此可知,对于\\(\\alpha,\\beta\\)的曼哈顿距离,因为符号可以为正为负，共存在\\(2^d\\)种情况.我们将每一种符号进行枚举,令当前的符号状态压缩为k,令f[k][i]为i在k情况下的贡献值,由第二条可推出,k情况下的空间两点最大值即为\\(i \\in [1,n],max\\{f[k][i]\\}-min\\{f[k][i]\\}\\) 由第三条,我们枚举每一个k,求出k种情况的最大值即为答案.\\(ans=\\max\\{cnt_i\\}(i \\in [1,n])\\) Code "},{"title":"一点闲话","date":"2022-10-15T16:36:08.000Z","url":"/2022/10/16/%E4%B8%80%E7%82%B9%E9%97%B2%E8%AF%9D/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":" 到了大学发现已经可以顺着自己的想法去做事情了，已经可以伸展手脚去学自己想学的东西了！我觉得这是很厉害的一件事情！ 去做自己想做的事情，这个想法很深刻！ "},{"title":"Codeforces_#826_div.3","date":"2022-10-11T14:06:43.000Z","url":"/2022/10/11/Codeforces-826-div-3/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["Codeforces","/tags/Codeforces/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["实况","/tags/%E5%AE%9E%E5%86%B5/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"晚上打CF,由于明天决定要吃早饭和拿水杯，决定鸽到明天(10.12)写。 先占个位 update 2022.10.13 懒得写了,有空再写("},{"title":"Codeforces_#825_div.2","date":"2022-10-10T16:47:39.000Z","url":"/2022/10/11/Codeforces-825-div-2/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["Codeforces","/tags/Codeforces/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["实况","/tags/%E5%AE%9E%E5%86%B5/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"十点左右突然想起要洗衣服.洗完衣服比赛刚好开始，运气还不错. A.Make A Equal to B 题意:给定两个长度为n的01串,有两种操作，自由互换串内的顺序和将串内一个位置取反，问使两串相等的最小操作次数. 考虑若使两串相等，可有两种操作: 使两串按位相等，代价是\\(\\sum_{i=1}^{n} (a_i\\quad xor\\quad b _i)\\) 使两串01数量相等，并重新排序.令两串1的个数分别为cnt1,cnt2,则代价为\\(\\lvert cnt1-cnt2\\rvert+1\\) 分别求出两种情况的操作数，取其min即可. 时间复杂度O(n) B.Playing with GCD 题意:给定长度为n的正整数序列\\(a_i\\)，是否存在长度为n+1的正整数序列\\(b_i\\),使得\\(a_i=\\gcd(b_i,b_{i+1})\\) 考虑对于\\(b_1,b_{n+1}\\)而言,其分别只受\\(a_1,a_n\\)的影响，可以直接将其忽略不计. 在忽略的\\(b_1,b_{n+1}\\)后,问题转化为是否存在序列\\(b_i\\)，使得\\(a_i|b_i,a_{i+1}|b_i,\\gcd(b_i,b_{i+1})=a_{i+1}\\) 不难想到\\(b_i为a_i，a_{i+1}\\)的最小公倍数,即\\(b_i=\\frac{a_ia_{i+1}}{\\gcd(a_i,a_{i+1})}\\), 同时要求满足\\(\\gcd(b_i,b_{i+1})=a_{i+1}\\),不妨取i,i+1,i+2三位,则 \\[ \\gcd(b_i,b_{i+1})=\\gcd\\left(\\frac{a_ia_{i+1}}{\\gcd(a_i,a_{i+1})},\\frac{a_{i+1}a_{i+2}}{\\gcd(a_{i+1},a_{i+2})}\\right)\\\\=a_{i+1}\\gcd\\left(\\frac{a_i}{\\gcd(a_i,a_{i+1})},\\frac{a_{i+2}}{\\gcd(a_{i+1},a_{i+2})}\\right)=a_{i+1}\\\\ \\therefore\\gcd\\left(\\frac{a_i}{\\gcd(a_i,a_{i+1})},\\frac{a_{i+2}}{\\gcd(a_{i+1},a_{i+2})}\\right)=1 \\] 预处理\\(\\gcd(a_i,a_{i+1})\\)，依次验证即可. 时间复杂度O(n) C1.Good Subarrays 题意:规定对于数列\\(b_i\\),若\\(\\forall i \\in n ,b_i\\geqslant i\\),则认为\\(b_i\\)为一个greater数列.给定一个长度为n的数列\\(a_i\\),求其子段中有多少greater数列. 考虑双指针.取l=r=1.若\\(a_i\\geqslant r-i+1\\),则r向右移动.当无法右移时,ans累加r-l,l右移一位. 时间复杂度O(n) 比赛总结 CF#825 div.2沿沿袭侧重于思维的特点，未考察过多的数据结构.自我感觉水平是有所长进的,也侧面反映出努力的重要性.但在C时因为没有信心交题导致C题时间过长,没有得到更高的分数，着实应当培养自信和细节能力. The end."},{"title":"Dairy_1","date":"2022-10-10T07:37:55.000Z","url":"/2022/10/10/Dairy1/","tags":[["Memory","/tags/Memory/"],["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"  Hey, password is required here. "},{"title":"My start","date":"2022-10-07T16:27:17.000Z","url":"/2022/10/08/My-story/","tags":[["闲话","/tags/%E9%97%B2%E8%AF%9D/"]],"categories":[["闲话","/categories/%E9%97%B2%E8%AF%9D/"]],"content":"Hello,World! 以后会经常写blog的！"},{"title":"翻车记录","date":"2022-09-02T05:01:35.000Z","url":"/2022/09/02/%E7%BF%BB%E8%BD%A6%E8%AE%B0%E5%BD%95/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["算法学习笔记","/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"2022.9.2 P8469 若取两数列比较，一数列严格不大于另一数列，求一数列整体gcd最大，则\\(gcd(a_1,a_2,...,a_n)_{max}=\\min {a_i}\\) 以及在int中 \\(2^{30}&gt; 0x7fffff\\) ,同时组合计数时不必进行排序，使用$ $累乘计数即可。 P1259 递归分治思路重点在于逐级利用相同的方式去处理问题，及n=k的情况可逐渐递归至初始状态再递归到本状态 检验答案时，首先注意行数，以及答案的输出要稳定且准确，对于输出debug时注意避免重复，有序地进行数据的输出。 2022.9.18 P3612 保持顺序递推是十分简单的。 与对偶复制不同的，顺序复制下当前位置的元素并非严格以\\(\\frac{1}{2}sum\\)进行分界，可能位于序列的左端，因此查询时不可一次完成，需循环缩短范围。 对于特殊情况要认真考虑，不可以散漫态度理解问题。 在题中没有强调且提示数据范围时，一定要注意数据范围，三年OI一场空，不开long long见祖宗。 2022.9.22 P1080 贪心规律推导 高精乘小int时需注意不要立刻更新，避免原有数据被覆盖 "},{"title":"luogu P2651 【添加括号III】","date":"2020-04-26T05:03:05.000Z","url":"/2020/04/26/luogu-P2651-%E3%80%90%E6%B7%BB%E5%8A%A0%E6%8B%AC%E5%8F%B7III%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["luogu","/tags/luogu/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"看题解区几乎都是gcd的做法,那我来写一发取模运算吧... 不难想到，分母数量越少，越可能被整除，仔细观察可发现，当分式为 \\(\\frac{a_1}{(\\frac{a_2}{\\frac{a_3}{...}})}\\),可以化简为\\(\\frac{a_1a_3a_4...}{a_2}\\),即只要其他的数可以被\\(a_2\\)整除即可。 我们对此进行边算边取模，当分子 mod 分母=0时即可以化为整数。 套用公式\\(a*b%mod=(a%mod)*b%mod\\),不难写出本题代码。 需要注意的一点是，在n=1时，因为没有分母，所以直接可以输出Yes。 Code: "},{"title":"关于杨辉三角的空间优化","date":"2020-03-15T15:37:35.000Z","url":"/2020/03/15/%E5%85%B3%E4%BA%8E%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E7%9A%84%E7%A9%BA%E9%97%B4%E4%BC%98%E5%8C%96/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"categories":[["算法学习笔记","/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"]],"content":"杨辉三角空间优化 对于一般二维做法，相信大家已经非常清楚了。本文主要讨论关于杨辉三角的空间优化。 在这里放一下杨辉三角的递推式：f[i][j]=f[i-1][j-1]+f[i-1][j]。 根据递推式，不难想到，每个位置的值只与上一行的当前位置和前一个位置有关，即f[i][j]=f[i-1][j-1]+f[i-1][j]。 显然地，当前位置的值只受上一行影响，即前面的值我们并不需要进行保存，这时我们可以借用滚动数组的思想进行空间优化，从数组尾端进行更新，尾端的值便等于上一次的值加上前一位的值，即f[i]=f[i-1]+f[i]，此时，我们就将空间复杂度优化到了O(n)。 注意： 在数组滚动的时候，我们需要倒序地进行更新，因为每一个数只与前一个数和当前位置有关，而与后面的数无关。 正序更新会导致重复更新，而倒序更新时前面存放的都是上一行的数据，此时更新是完全符合递推式的，所以我们采用倒序的方式进行更新数组。 Code: "},{"title":"luogu P5719 【【深基4.例3】分类平均】","date":"2020-02-26T13:33:19.000Z","url":"/2020/02/26/luogu-P5719-%E3%80%90%E3%80%90%E6%B7%B1%E5%9F%BA4-%E4%BE%8B3%E3%80%91%E5%88%86%E7%B1%BB%E5%B9%B3%E5%9D%87%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["luogu","/tags/luogu/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"复杂度可以做到O(1).. 不难发现题目的几个性质 A类+B类 的和 =\\(\\sum_{i=1}^{n} i\\) 一个数不是A类就是B类 A类数的第一个必然为k A类数由1k,2k+....+floor(\\(\\frac{n}{k}\\))k组成 由此，我们可以发现通过第四条，我们可以提取k，使其变为k(1+2+....+floor(\\(\\frac{n}{k})\\))。 通过公式变换可得A类数的个数为floor(\\(\\frac{n}{k}\\)),而A类数的和为\\(\\frac{k(\\frac{n}{k})(\\frac{n}{k+1})}{2}\\)。 简单数学推理可得，B类数的总和就是1-n的和减去A类数的和，即为\\(\\frac{n(n+1)}{2}\\)-k\\(\\frac{(\\frac{n}{k})(\\frac{n}{k+1})}{2}\\)，同时，B类个数为n-floor(\\(\\frac{n}{k}\\))。 有了这些性质，我们便能轻松的AC了。 注意：k可能为0，A类数的个数可能为0或n，此处我们需要特判一下 Code: "},{"title":"My_Back_Pages","date":"2020-02-14T11:02:36.000Z","url":"/2020/02/14/My-Back-Pages/","tags":[["Memory","/tags/Memory/"]],"categories":[["Memory","/categories/Memory/"]],"content":" 9950a9b445f403aa941f66f0d5284441f087bd90faeb452758ff2ec59fdbb62328c14f8d6fcd92c45d0a704a26dfc3ad74658a03c64f131fac1b2962a26aefd072dab808247c2ca46817cd01698bdfb98ecf1fbf1284e9648af2c26f7816e156223961f13c4a231c828e3ff022575cc064e8ee490d3f73bd30445fadd7a8a6a7a8805d968c28db073c516a9ca4e7561f73005952eab3e41d05057f7d0706d0275f68561116b9a5c55c68be259cb7a0f50ddcbf8eeba98da675ceaacef3c6470b4c030cb7c76d11543a59d7a13fb347ba85cb13de779549062ee3675ec7faad8f3e5955b7f7049e08e3f566949b4e9b5b62921e8d729b0d91e4863255d0e33acdcdcff54ec2158bf1b7c5738df1eaded71271a975bbfcd8c19bf28d27ca2520909bda758612835e9c30b27754cdd07bbfc51ec2e3abbb7481c7abc2107606c257e2979b56acc91e459984d25e5fd15ef9d1968614baebc6297a5dfb3a6032c37998d44b5e59d7bae3f9ef54fafb4e12c63ab751d1386221cf0757d153d7b4935cec432a464c32038a2fb3d018cc3d02ba95bc9cd6aef9b65967a55fae9ac343dea772f05d607f01411da774d34760d1d5e91951265a7c457c228f0eaf2551f8d002a07a67bae5873a565c68868f2b4a6af79916b7db067966b03ca87103ed99f3b9e5fc23fe3a7b8c1cfa7721f47705655320cfe988c84bcf3037fbf884b2c30b0a11eb3c7be78d544ed3933ff6a866c9896fed8bef672417664c31b32aa387c5c05fd21dc52bf10c0a49f36fc9dc3df443d3998cd1f56a272f2832109c4c52eef4fa23dd7e8c95d38e63d948256bc71f3cfd37b4a2713e925fcb26ac5607dfa647364303c5f79b435bf8fd152d888eca337de2f43bea1a2ed3a0b230759a11a3a41b9cd5f25c44247a9daae5cf9f4743da7a17a892d7f0bcd9429d4029954f9fc69017a7bb8f0b37868e18cace965a9246be8437678917c9b11b1bace847efa294fa1c2faa8ef0bc0c11079000f8af3809df2e9a523264b053146469eeff4a9153eb924cb3045cbf5b9163c27ecc49c2cb3e787a682ded804f72afcc1bf8d178f680154575ae499f6499949cd3b4308635ba2c7f892c12dd1eb337eb3c22180cd862c974fd9944a575d1df9f36b04b346169c8816e358c9b0e74f628e7c8a50fa78610b6971f920a2ca72069b32ae84de461b5ca8616b67c7bf7ab5238be7276dc99cc4baca2fe2c331b912033c3fa39af09c42a438eee41838f1ce2044ac86cefa8bc7c55d5b0c8430ca48264b8ce91cbc05961cb0a6798ab0e7f4fa85d626e7503f14f4d8c6c38b450b3fcb03d1e720925b8939018d8810cbf4b4f6ec24d8f88392cf9189ff5a353ef390a11331b3365a186f258f08e7d6e1d662f6efea37d980bfde1d9e9d232f4238753d82cb7dcfabcffab9381e8a95ad2cea7eee5998115f00f4964a080669bd973e4fffc0e7993f5005a7025df3918a2a525a898b2b5c0a71b84c74ed9c59a0be0e23cf3e34e25a2bfaa5b31a3d3e91465b449f6488c5541781c294f7e8e75784d6d3273dcfe60c935f59eda8cfa21fe057a9b201f51ad84425550d3c9f82dcf3a391a52afd48c151e0ad8cfe419afae3f9b1e3bd8fa4eb8b8d8b1e2a5e0d18de54e87b329ede3b9a2a391f9343d57cf9e18d7d2428d7c7824ddb98ea7ba970768625ea37c8d8c418d9edc6afab840ed87c3644997367e54c44722a43593f6ca9c4053387aa9958aabd4e5b36cacb24791cf9f09a3b6bb75db5bea1188aa32f6a00e128f233e9ca570d2c7f4db7aca95d57fc4e990b07d32d51d16ed02fc0ea1bed52f597f95403cd551679d017dc62dd5bb0228f2ec060da906ee2aff790d870f60209514f8e745b28933c262bf05dca687b47e99ff2ecc2472513dd85201a534fd0940f9519b836384000fa7e8bf6af31af8c227f3841a1980da0d6c3487e20ab8f701ec3717bc63e454a0ae960ce5ebf85d36b1f984322083fc88257f9de66a915a986b19b545623bf6459d4a1b4d1918742c5b4550f4000d388a15f15332da3b01269cd437cb101defe3570ca8c4336e963b359714107ac9352f875dc5faa05415c4852511f9bff811cc087affccf56d4ee75787a71e31383a5f73b1c1a7a420ba0b5ddf2be59dd3866625b9bec6991d355dd321a0b078d4b4f98c33c1e676b34430036c2489f204557435fc964b3f78bb8a1f8909a8f67756fc4d0d6e88b7ca196edaf719180e40cd181c1e24769c54a6ae38f10b60863c3af42c50d9fff0f0d1a2260a4addc1c830e569e149fe998ff2a4ea65bca970fb6880e7b59c63a2fefac347ee1c4a1c23ec20439a9e18dc504f47c0bce865bc1de4bd9b5e12f0fa72dbde8a5a7f33cf10aa43317c3671a7802b3250ba300396e5acedcfba19968805225b870ec41af0f7926bb5b3deb85675a36b60f64ca5a5efbae4bb2bb618ab617bd2aa43f3e248328c6c8ffb4da7e03b0c9f316c8fc6a47ff3ea363ff63217c45c163284d11ad1c6fa3c327c834a13d3d96ecb5d0a1a70e7299a366119fc452d9597d4434c7d0f5ae5d22f126325cc95a4b3e93ef9c4ae0f82d1d7a243dd7d087ca4c26255aacda41ca2a953a48e146024c5d9d2923412459557f4b97a3a646fbb668baca1ef45d98d4209f0aee11ff8c9f25d11481b77c51becd09e43ea8c505019cb3fea014c735d283125ac6e400b592210547780dc0fed0cd84b90f5bbf32b899493400bffbeacf504da3ee219f676841c96d254a1c1a088d4506a11b42ff401f5cb61641208c8b4d2eb37ffef96709be73157672f502e6e07d9cbc6d51e3bfacca845b2e5ab149025e969ebfca44d960ef56fd043b852c80c4e5c4b50759750d416abf0c3d177e0cd4d660e47f809318b6dded4c92057c6ff3c1b2c8a2ee73569bee0c2174b5276ec6667e25617507bf2d9a59d853f318cba3136032373fcfaa1fba17ba85fc4dbb37342533b950d8f30f3a3353bf6a069f2cf201f4398f0349d21da2ea463b824863b386d2211f1aa4c550fa70fb34a6ebd3d491c265aba3af17db0f313d7875742b1fc25ccaa8fd1fdde52b7476b2735d6a70f7e493010229f1910c26d87a4a9e72827ca86a6d26f8b7dc6bb42ecd66e9585d61e0b2483ea321cece036ebe7e2af4a7ed45c834cc441eb40c277d254e883cb55963a2e82cfeb6a68a2fac902e0adbf5575b20571442e889f3d41bffe98c235c2d5a68dcbdbfd86782f52dd04a43b8472cc642d98d70ded2f9018eb3ee32b4582440c2de4ee660f Hey, password is required here. "},{"title":"luogu P5736 【【深基7.例2】质数筛】","date":"2020-02-05T09:39:37.000Z","url":"/2020/02/05/luogu-P5736-%E3%80%90%E3%80%90%E6%B7%B1%E5%9F%BA7-%E4%BE%8B2%E3%80%91%E8%B4%A8%E6%95%B0%E7%AD%9B%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["luogu","/tags/luogu/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"看见题解区没有用Miller-Rabin，所以我来了 这道题不需要打素数表，只要直接判断输出即可。 算法介绍：Miller-Rabin Miller-Rabin算法是一种随机化的算法，可以大概率的检测出一个数是合数还是质数，它依赖于费马小定理和二次探测两个理论，若测试次数为a，则该算法出错几率为\\(4^{-a}\\)不会证（逃。两个理论的相关证明（引用于CSDN） 根据费马小定理，如果 p 为质数且 a 与 p 互质，那么有\\(a^{p−1}≡1(mod\\quad p)\\),我们随机出一个a，用快速幂得到\\(a^{p-1}mod\\quad p\\)，若结果为1，则再次测试，若结果不为1，则p一定为合数，结束测试，通常，只需随机出10个值便可基本测出是否为质数。 Code: "},{"title":"luogu P6015 【[CSGRound3]游戏】","date":"2020-01-29T10:20:30.000Z","url":"/2020/01/29/luogu-P6015-%E3%80%90-CSGRound3-%E6%B8%B8%E6%88%8F%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["luogu","/tags/luogu/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"双指针做法 坑点:贪心是错误的。 举例 5 1 3 3 ，k=6,可以发现，按贪心来取，X=6时，前缀和最大可以取到（5+1）6，而后面也可以取到( 3+3）6，而第一段只取5时，第二段最大只能取到4，所以此时有必胜策略，故贪心是错误的，我们需要逐个枚举第一段取到的纸牌数。 由于每次两个人取到的纸牌的末尾下表都是不下降的，也就是说，通过双指针进行扫描可以有一个很优的复杂度不会分析。我们可以对于第一段取的纸牌数逐个枚举，而对于第二段就可以直接向后扫描取最大值了。 Code： "},{"title":"CF918A 【Eleven】","date":"2020-01-21T04:12:23.000Z","url":"/2020/01/21/CF918A-%E3%80%90Eleven%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["Codeforces","/tags/Codeforces/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"一看这道题没有用字符串的，我就知道我的机会来了 由题意，我们要在斐波那契数列的数位上输出\"O\", 其它的位置输出\"o\" ，那么我们可以用一个now来存放当且斐波那契数列的未被走过的位置，若当前走的位置不等于斐波那契数列第一位未走过的，就输出\"o\"，若等于，则输出\"O\",再令now++。 注意：now是从2开始的，因为f[1]=f[2]=1，为了避免重复，所以这里从2开始. 放一下递推式： f[n]=f[n-1]+f[n-2] 由于第20位左右的斐波那契数已超过1000，递推只需进行到20位就可以了 懒得算具体位数。 据此，我们可以得出一份代码: Code: 正解到这里就结束了。 下面是歪解 这道题都没有人使用字符串，所以...--&gt;打表! (上面的正解稍微改改就能打表了 string大法好 函数介绍:string的substr 调用string需要使用#include 废话 用法： 由题意，任何长度的答案都是从n=1000的答案里面截取的，所以我们只需要把n=1000的答案打出来，再利用substr对于前n位进行截取，直接输出便为答案了。 Code: 再水红题就没脸见人了"},{"title":"luogu P5887 【Ringed Genesis】","date":"2020-01-01T10:46:37.000Z","url":"/2020/01/01/luogu-P5887-%E3%80%90Ringed-Genesis%E3%80%91/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["luogu","/tags/luogu/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"（大概是去世的NOIP.PJ T1难度 由题意可知，兔子爬过的格子是一个环，移动方式是（当前位置+k）%n。 由此可见每一只兔子的移动方式都是同样的，所以当一只兔子跳到一个曾经跳过的位置，便意味着接下来的位置也都被之前跳跃过了。 。 所以我们可以口胡发现，当移动到的位置被经过时，就不需往下进行下去了。 在这里，我们用一个bool数组进行标记是否走过该位置，设定一个总数ans=n,每走过一个没有经过的格子，ans--，最后的结果自然便是不可能走过的格子数。 Code： 口胡完成！"},{"title":"CSP-2019-S-day1-T1","date":"2019-12-01T07:53:26.000Z","url":"/2019/12/01/CSP-2019-S-day1-T1/","tags":[["算法学习笔记","/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"],["题解","/tags/%E9%A2%98%E8%A7%A3/"],["CSP-2019-S","/tags/CSP-2019-S/"]],"categories":[["题解","/categories/%E9%A2%98%E8%A7%A3/"]],"content":"这道题大概模拟就可以了... 考场上做的时候差点以为它让我写一种格雷码生成方式 吓坏我了 根据题意，\\(2^{n}\\)的序列显然是由\\(2^{n-1}\\)的序列('0'+正序)+('1'+倒序)生成的 由此可知(字母含义详见题面)： 若k&lt;=\\(2^{n-1}\\)-1，开头一定为0，此时位置直接为上一次序列中的位置 反之,若\\(k&gt;2^{n-1}-1\\)，开头则为1，此时位置为上一次序列中的位置(n&lt;&lt;1)-k-1 (读者自证不难 据此可进行模拟 然而我还是因为没开cstdio挂掉了.. 关于unsigned long long 查了一下，貌似unsigned溢出后好像再运算，只要数值回到unsigned long long，好像可以正常输出?.."},{"title":"CSP 2019 Memory","date":"2019-11-23T10:36:40.000Z","url":"/2019/11/23/CSP-2019-Memory/","tags":[["Memory","/tags/Memory/"]],"categories":[["Memory","/categories/Memory/"]],"content":"  Hey, password is required here. "}]